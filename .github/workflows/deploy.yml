name: Build and Deploy PDF Agent API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Create/update secrets
      run: |
        # Create the secret directly with kubectl
        kubectl create secret generic pdf-agent-secret \
          --from-literal=API_KEY="${{ secrets.API_KEY }}" \
          --from-literal=API_BASE="${{ secrets.API_BASE }}" \
          --from-literal=MODEL_ID="${{ secrets.MODEL_ID }}" \
          --namespace=fsi \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy manifests
      run: |
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Update deployment image
      run: |
        # Get the first image tag
        IMAGE=$(echo "${{ needs.build-and-push.outputs.image }}" | head -n1)
        
        # Apply deployment and update image
        kubectl apply -f k8s/deployment.yaml
        kubectl set image deployment/pdf-agent-api pdf-agent-api=$IMAGE -n fsi

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/pdf-agent-api -n fsi --timeout=300s

    - name: Show deployment status
      run: |
        echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n fsi -l app=pdf-agent-api >> $GITHUB_STEP_SUMMARY 