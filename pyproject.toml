[project]
name = "pdf-agent-api"
version = "0.1.0"
description = "A PDF Visual Question Answering API using AI agents"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Jens LÃ¼cke", email = "jens.luecke@aleph-alpha.com"}
]

dependencies = [
    "fastapi>=0.116.1",
    "pdf2image>=1.16.3",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "openai>=1.0.0",
    "smolagents[litellm]>=1.20.0",
    "python-multipart>=0.0.20",
    "arize-phoenix-otel>=0.12.1",
    "openinference-instrumentation-smolagents>=0.1.14",
    "openinference-instrumentation-litellm>=0.1.24",
    "uvicorn>=0.35.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "pre-commit>=4.0.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.25.0",
    "httpx>=0.28.0",
]

[project.scripts]
pdf-agent-api = "src.main:run_server"
run-eval = "eval.run_eval:main"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.hatch.build.targets.wheel]
packages = ["src", "eval"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
